%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2376 760
%%HiResBoundingBox: 0 0 2376 759.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2376 759.12 re
W
q
[0.24 0 0 -0.24 0 759.12] cm
q
0 0 9899.999 3158.3779 re
W*
q
[3.124468 0 0 3.123282 0 0.00153721] cm
0 0 3168.5393 1011.23596 re
f
Q
q
[32.171394 0 0 32.159184 -88.720932 56.091499] cm
q
48.314999 75.162003 m
48.397999 75.072006 48.480999 74.980003 48.560997 74.862999 c
49.374996 73.678001 50.040997 71.937996 50.521996 71.606003 c
51.002995 71.273003 51.372997 72.162003 51.334995 71.197006 c
51.299995 70.238007 50.596996 67.832008 49.669994 67.796005 c
48.744995 67.757004 47.819996 66.390007 47.596992 65.945007 c
47.374992 65.501007 46.079994 62.947006 45.709991 63.651009 c
45.228992 66.574005 l
45.080994 66.537003 43.488991 65.833008 43.599991 65.464005 c
43.710991 65.093002 43.625992 64.798004 43.59499 64.649002 c
43.562988 64.500999 42.341991 63.342003 41.82299 64.032005 c
41.304989 64.724007 40.713989 65.502007 40.602989 65.352005 c
40.492989 65.205002 39.196991 65.501007 39.12299 65.612007 c
39.048988 65.723007 37.346989 67.387009 37.346989 67.387009 c
37.346989 67.387009 34.792988 69.460007 34.792988 69.82901 c
34.792988 70.200012 34.866989 73.159012 35.977989 73.641006 c
37.08799 74.123009 37.938988 73.050003 39.493988 73.641006 c
41.048988 74.234009 44.192989 74.084007 44.711987 74.604004 c
45.222988 75.116005 46.306988 75.481003 46.548988 75.597 c
44.65799 75.993004 42.699989 76.203003 40.692989 76.203003 c
26.387989 76.203003 14.50799 65.628006 12.456989 51.885002 c
13.239989 52.502003 18.98399 53.457001 18.98399 53.838001 c
18.98399 54.242001 21.804989 58.217003 22.74799 59.665001 c
23.69099 61.112 23.824989 59.327 23.824989 59.327 c
23.824989 59.327 24.092989 57.194 24.32799 56.250999 c
24.56399 55.309998 26.481989 54.200001 27.390989 53.896999 c
28.29999 53.593998 27.963989 54.468998 28.29999 55.578999 c
28.63599 56.689999 29.779989 56.016998 29.779989 56.118 c
29.779989 56.217999 29.61199 57.768002 29.578989 58.104 c
29.544989 58.439999 30.723989 59.720001 30.82399 60.155998 c
30.92499 60.593998 29.981991 59.417 29.040989 58.810997 c
28.097988 58.204998 28.602989 62.914997 34.356987 64.295998 c
40.111988 65.675995 40.044987 63.857998 39.337986 63.823997 c
38.631985 63.790997 33.447987 63.050999 33.077988 62.645996 c
32.707989 62.242996 32.101986 61.535995 31.865988 61.333996 c
31.630987 61.129997 31.865988 60.053997 30.519987 58.403996 c
29.173986 56.754997 32.337986 58.035995 32.942986 57.833996 c
33.547985 57.630997 33.817986 56.149994 33.514984 55.746994 c
33.211983 55.341995 32.201984 54.467995 34.759983 53.927994 c
37.318985 53.389996 38.057983 50.394993 38.024982 49.958992 c
37.990982 49.520992 37.586983 48.74699 37.957981 48.30899 c
38.32798 47.870991 37.923981 47.63599 37.284981 47.602989 c
36.644981 47.568989 36.948982 47.231991 37.756981 47.131989 c
38.56398 47.030987 39.135983 47.231987 39.068981 47.804989 c
39.00198 48.377991 38.798981 49.925987 39.87698 49.318989 c
40.953979 48.713989 40.186981 47.164989 40.186981 47.164989 c
40.186981 47.164989 39.136982 46.15699 41.89698 45.348991 c
44.655979 44.540993 45.363979 39.16399 44.35498 38.625992 c
43.345982 38.08699 45.596981 37.069992 46.540981 36.935993 c
47.482983 36.800995 49.165981 35.588993 49.232983 36.328995 c
49.299984 37.069996 49.614983 38.986996 49.614983 38.986996 c
49.614983 38.986996 50.511982 41.511997 51.588982 39.021996 c
52.665981 36.531994 56.636982 33.704994 57.108982 33.165997 c
57.580982 32.626999 60.541981 32.223995 60.878983 31.482996 c
61.213982 30.741997 55.022984 28.184996 54.296982 28.453997 c
53.57098 28.722996 49.16798 28.049997 47.820984 26.164997 c
46.473984 24.280996 43.983982 25.087997 44.118984 26.097998 c
44.253983 27.106998 38.396984 24.683998 38.059982 24.616997 c
37.723984 24.549997 34.761982 22.328997 34.829983 21.587997 c
34.873981 21.097998 34.173985 20.438997 33.133984 20.121998 c
35.543983 19.458998 38.076984 19.097998 40.694984 19.097998 c
51.089985 19.097998 60.201984 24.683998 65.195984 33.008999 c
65.407982 32.600998 65.641983 32.217999 65.894981 31.863998 c
60.62598 23.483997 51.302982 17.897999 40.693981 17.897999 c
24.28898 17.897999 10.94198 31.244999 10.94198 47.650002 c
10.94198 64.055008 24.28898 77.402 40.693981 77.402 c
46.03598 77.402 51.145981 75.912003 55.484982 73.436996 c
55.145981 72.650993 55.360981 72.311996 55.406982 72.061996 c
54.032001 72.774002 50.405998 74.582001 48.314999 75.162003 c
h
27.722 22.228001 m
26.558001 23.248001 25.606001 24.248001 25.473 24.348 c
25.343 24.445999 23.942999 25.045 22.528999 25.639 c
24.122999 24.32 25.865999 23.179001 27.722 22.228001 c
h
W
[54.953005 0 0 59.504005 10.941981 17.898006] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1 0 axialSH
Q
q
92.462997 52.327 m
72.377998 46.573997 l
72.752998 39.001999 l
72.752998 36.871998 71.024002 31.445999 68.895996 31.445999 c
68.094994 31.445999 67.351997 32.212997 66.737 33.284 c
66.5 33.695 66.284996 34.153 66.090996 34.626999 c
65.443993 36.202999 65.043999 37.980999 65.043999 39.001999 c
65.418999 46.722 l
45.328999 52.327 l
45.176998 52.371998 45.056999 52.493 45.017998 52.648998 c
44.978996 52.803997 45.026997 52.967999 45.143997 53.077999 c
49.020996 56.764 l
49.103996 56.839001 49.215996 56.882999 49.327995 56.882999 c
49.343994 56.882999 49.363995 56.882999 49.384995 56.878998 c
49.503994 56.864998 60.253994 55.519997 65.816994 54.885998 c
66.097992 60.632999 l
66.209991 62.931999 l
66.544991 69.789001 l
57.160992 72.625999 l
57.01099 72.670998 56.895992 72.794998 56.859993 72.948997 c
56.821995 73.098999 56.866993 73.259995 56.976994 73.370995 c
58.996994 75.341995 l
59.081993 75.420998 59.193993 75.468994 59.308994 75.468994 c
59.342995 75.468994 59.374996 75.458992 59.410995 75.453995 c
59.468994 75.438995 64.555992 74.252998 67.334991 73.822998 c
67.721992 74.834 68.245995 75.697998 68.896988 75.697998 c
69.550987 75.697998 70.079987 74.807999 70.46299 73.778999 c
73.10099 74.172997 78.390991 75.439003 78.44799 75.453003 c
78.483994 75.459 78.519989 75.469002 78.551987 75.469002 c
78.669983 75.469002 78.783989 75.419998 78.868988 75.334999 c
80.817986 73.366997 l
80.925987 73.252998 80.970985 73.094994 80.930984 72.945 c
80.893982 72.794998 80.780983 72.671997 80.632988 72.625999 c
71.23999 69.707001 l
71.970993 54.827 l
77.21299 55.424999 88.419991 56.864998 88.539993 56.878998 c
88.560997 56.882999 88.581993 56.882999 88.597992 56.882999 c
88.714989 56.882999 88.826988 56.838001 88.911995 56.755001 c
92.651993 53.074001 l
92.763992 52.963001 92.80999 52.798 92.769989 52.646 c
92.733002 52.492001 92.613998 52.370998 92.462997 52.327 c
h
W
[47.779531 0 0 44.252 45.004676 31.446002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000537 def
/yMin -0 def
/xMax 1.00054 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0.000537 1.00054 0 axialSH
Q
Q
q
[26.329788 0 0 26.319792 9610.3721 263.19943] cm
q
-235 0 3 100 re
W
[3 0 0 100.000001 -234.999995 -0.00000167301] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.000002 def
/yMin 0 def
/xMax 0.999998 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
-0.000002 0.999998 0 axialSH
Q
Q
q
[45.458881 0 0 45.441624 3896.8086 404.97736] cm
q
13.84 11.36 m
13.84 15.2 l
9.08 15.2 l
9.08 40.040001 l
5.24 40.040001 l
5.24 15.200001 l
0 15.200001 l
0 11.360001 l
13.84 11.360001 l
13.84 11.36 l
h
19.4 18.280001 m
22.119999 18.280001 24.32 20.440001 24.32 23.16 c
24.32 25.08 l
20.52 25.08 l
20.52 23.16 l
20.52 22.52 20.040001 22.039999 19.4 22.039999 c
18.559999 22.039999 l
17.959999 22.039999 17.439999 22.519999 17.439999 23.16 c
17.359999 40.040001 l
13.599999 40.040001 l
13.679998 23.160002 l
13.679998 17.400002 l
17.439999 17.400002 l
17.439999 18.400002 l
17.799999 18.320002 18.199999 18.280001 18.559999 18.280001 c
19.4 18.280001 l
h
35.68 32.759998 m
35.68 39.959999 l
32 39.959999 l
32 39.84 l
31.639999 39.920002 31.280001 39.959999 30.879999 39.959999 c
28.08 39.959999 25.84 37.719997 25.84 34.919998 c
25.84 30.639997 l
25.84 29.519997 26.280001 28.479998 27.08 27.679996 c
27.84 26.919996 28.879999 26.479996 30 26.479996 c
31.92 26.479996 l
31.92 22.159996 l
31.92 21.559996 31.4 21.039995 30.799999 21.039995 c
30.599998 21.039995 l
29.959999 21.039995 29.479998 21.559996 29.479998 22.159996 c
29.479998 25.199997 l
25.759998 25.199997 l
25.759998 22.159996 l
25.759998 19.479996 27.919998 17.319996 30.599998 17.319996 c
30.799999 17.319996 l
33.48 17.319996 35.639999 19.479996 35.639999 22.159996 c
35.68 32.759998 l
h
30.879999 36.240002 m
31.48 36.240002 32 35.760002 32 35.16 c
31.959999 30.24 l
30 30.199999 l
29.84 30.199999 29.76 30.279999 29.68 30.32 c
29.639999 30.4 29.559999 30.48 29.559999 30.639999 c
29.559999 34.919998 l
29.559999 35.639999 30.16 36.239998 30.879999 36.239998 c
30.879999 36.240002 l
h
40.040001 39.959999 m
39.639999 36.559998 39.080002 33.16 38.560001 29.84 c
37.960003 25.959999 37.280003 21.560001 36.84 17.48 c
40.720001 17.48 l
41.040001 20.599998 41.48 23.719999 41.960003 26.759998 c
42.000004 26.559998 42.040005 26.359999 42.040005 26.199999 c
42.200005 24.599998 42.400005 23.079998 42.560005 21.639999 c
42.760006 20.24 42.920006 18.879999 43.040005 17.559999 c
46.840004 17.559999 l
46.720005 19 46.560005 20.76 46.360004 22.16 c
46.160004 23.559999 46.000004 25.040001 45.840004 26.559999 c
45.840004 26.719999 l
45.400005 29.48 45.040005 32.200001 44.680004 34.84 c
44.480003 36.52 44.240005 38.279999 44.000004 40 c
40.040005 40 l
40.040005 39.959999 l
40.040001 39.959999 l
h
53.759998 39.919998 m
50.879997 39.919998 48.559998 37.559998 48.559998 34.68 c
48.559998 22.200001 l
48.559998 19.560001 50.719997 17.400002 53.359997 17.400002 c
54.199997 17.400002 l
56.839996 17.400002 58.999996 19.560001 58.999996 22.200001 c
58.999996 27.440001 l
52.279995 27.560001 l
52.279995 34.68 l
52.279995 35.52 52.919994 36.200001 53.759995 36.200001 c
54.599995 36.200001 55.279995 35.52 55.279995 34.68 c
55.279995 32.200001 l
58.999996 32.200001 l
58.999996 34.68 l
58.999996 37.560001 56.639996 39.919998 53.759995 39.919998 c
53.759998 39.919998 l
h
54.200001 21.08 m
53.360001 21.08 l
52.760002 21.08 52.279999 21.6 52.279999 22.200001 c
52.279999 23.880001 l
55.279999 23.800001 l
55.279999 22.200001 l
55.279999 21.6 54.799999 21.08 54.199997 21.08 c
54.200001 21.08 l
h
67.400002 36.16 m
67.400002 39.959999 l
66.239998 39.959999 l
63.359997 39.959999 61 37.599998 61 34.720001 c
61 11.440001 l
64.800003 11.440001 l
64.800003 34.720001 l
64.800003 35.48 65.440002 36.16 66.240005 36.16 c
67.400009 36.16 l
67.400002 36.16 l
h
78.720001 24.92 m
73.200005 24.92 l
73.200005 36.200001 l
78.760002 36.200001 l
78.760002 40 l
69.400002 40 l
69.400002 11.440001 l
78.760002 11.440001 l
78.760002 15.240001 l
73.200005 15.240001 l
73.200005 21.120001 l
78.720001 21.120001 l
78.720001 24.92 l
h
90.68 32.759998 m
90.68 39.959999 l
87 39.959999 l
87 39.84 l
86.639999 39.920002 86.279999 39.959999 85.879997 39.959999 c
83.079994 39.959999 80.839996 37.719997 80.839996 34.919998 c
80.839996 30.639997 l
80.839996 29.519997 81.279999 28.479998 82.079994 27.679996 c
82.839996 26.919996 83.879997 26.479996 84.999992 26.479996 c
86.919991 26.479996 l
86.919991 22.159996 l
86.919991 21.559996 86.399994 21.039995 85.799988 21.039995 c
85.599991 21.039995 l
84.959991 21.039995 84.479988 21.559996 84.479988 22.159996 c
84.479988 25.199997 l
80.759987 25.199997 l
80.759987 22.159996 l
80.759987 19.479996 82.919991 17.319996 85.599991 17.319996 c
85.799988 17.319996 l
88.479988 17.319996 90.639984 19.479996 90.639984 22.159996 c
90.68 32.759998 l
h
85.879997 36.240002 m
86.479996 36.240002 87 35.760002 87 35.16 c
86.959999 30.24 l
85 30.199999 l
84.839996 30.199999 84.760002 30.279999 84.68 30.32 c
84.639999 30.4 84.559998 30.48 84.559998 30.639999 c
84.559998 34.919998 l
84.559998 35.639999 85.159996 36.239998 85.879997 36.239998 c
85.879997 36.240002 l
h
98.040001 39.959999 m
95.080002 39.959999 92.68 37.559998 92.68 34.599998 c
92.68 31.48 l
96.480003 31.48 l
96.480003 34.599998 l
96.480003 35.48 97.200005 36.16 98.040001 36.16 c
98.919998 36.16 99.599998 35.48 99.599998 34.599998 c
99.599998 32.879997 l
92.68 25.719997 l
92.68 22.559998 l
92.68 19.599998 95.080002 17.159998 98.040001 17.159998 c
101 17.159998 103.400002 19.599998 103.400002 22.559998 c
103.400002 25.039997 l
99.599998 25.039997 l
99.599998 22.559998 l
99.599998 21.679998 98.919998 20.999998 98.040001 20.999998 c
97.200005 20.999998 96.480003 21.679998 96.480003 22.559998 c
96.480003 24.159998 l
103.400002 31.359997 l
103.400002 34.599998 l
103.400002 37.559998 101 39.959999 98.040001 39.959999 c
h
110.599998 39.919998 m
107.720001 39.919998 105.400002 37.559998 105.400002 34.68 c
105.400002 22.200001 l
105.400002 19.560001 107.560005 17.400002 110.200005 17.400002 c
111.040001 17.400002 l
113.68 17.400002 115.840004 19.560001 115.840004 22.200001 c
115.840004 27.440001 l
109.120003 27.560001 l
109.120003 34.68 l
109.120003 35.52 109.760002 36.200001 110.600006 36.200001 c
111.44001 36.200001 112.120003 35.52 112.120003 34.68 c
112.120003 32.200001 l
115.840004 32.200001 l
115.840004 34.68 l
115.840004 37.560001 113.480003 39.919998 110.600006 39.919998 c
110.599998 39.919998 l
h
111.040001 21.08 m
110.200005 21.08 l
109.600006 21.08 109.120003 21.6 109.120003 22.200001 c
109.120003 23.880001 l
112.120003 23.800001 l
112.120003 22.200001 l
112.120003 21.6 111.639999 21.08 111.040001 21.08 c
h
W
[115.840013 0 0 28.680001 0.00000412168 11.360001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
